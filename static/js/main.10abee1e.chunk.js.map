{"version":3,"sources":["components/TodoItem/TodoItem.js","components/Header.js","components/InputToDO.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","checked","completed","onChange","handleChange","id","title","onClick","deleteToDoHandler","Header","style","textAlign","margin","color","marginBottom","InputToDO","onSubmitHandler","e","preventDefault","state","length","addToDo","setState","correctLength","inputChange","event","target","value","action","onSubmit","this","placeholder","React","Component","TodoContainer","newArray","todos","console","log","push","uuidv4","onChangeCheckbox","updateTodosArr","map","todo","updateTodos","filter","item","key","App","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10abee1e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./TodoItem.scss\";\nconst TodoItem = (props) => {\n  return (\n    <li className=\"todo__item\">\n      <input\n        type=\"checkbox\"\n        checked={props.completed}\n        onChange={() => props.handleChange(props.id)}\n      ></input>\n\n      <span className={props.completed ? \"completed-item\" : null}>\n        {props.title}\n      </span>\n      <button onClick={() => props.deleteToDoHandler(props.id)}>Delete</button>\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\n\nconst Header = () => {\n  const h1Style = {\n    textAlign: \"center\",\n    margin: \"30px\",\n    color: \"gray\",\n  };\n  return (\n    <header>\n      <h1 style={h1Style}>The Amazing To Do App</h1>\n      <p style={{ marginBottom: \"15px\" }}>Add, Edit or Delete a Todo Item.</p>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nclass InputToDO extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      correctLength: true,\n    };\n  }\n  onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    const { title } = this.state;\n    if (title.length > 3 && title.length < 25) {\n      this.props.addToDo(title);\n      this.setState({\n        title: \"\",\n        correctLength: true,\n      });\n    } else {\n      this.setState({ correctLength: false });\n    }\n  };\n  inputChange = (event) => {\n    this.setState({ title: event.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <form action=\"\" onSubmit={this.onSubmitHandler} className=\"form\">\n          <input\n            className=\"input-text\"\n            type=\"text\"\n            placeholder=\"Todo...\"\n            value={this.state.title}\n            onChange={this.inputChange}\n          />\n          <input type=\"submit\" className=\"input-submit\" value=\"hinzufÃ¼gen\" />\n          {this.state.correctLength ? null : (\n            <p>Dein Todo muss zwischen 3 und 25 Zeichen lang sein</p>\n          )}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default InputToDO;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport Header from \"./Header\";\nimport InputToDo from \"./InputToDO\";\nimport { v4 as uuidv4 } from \"uuid\";\n// class component\nclass TodoContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [\n        {\n          id: uuidv4(),\n          title: \"React lernen\",\n          completed: false,\n        },\n        {\n          id: uuidv4(),\n          title: \"JavaScript auffrischen (Klassen, usw.)\",\n          completed: false,\n        },\n        {\n          id: uuidv4(),\n          title: \"Props verstehen\",\n          completed: false,\n        },\n      ],\n    };\n  }\n  addToDo = (title) => {\n    let newArray = [...this.state.todos];\n    console.log(newArray);\n\n    newArray.push({\n      id: uuidv4(),\n      title: title,\n      completed: false,\n    });\n    this.setState({\n      todos: newArray,\n    });\n  };\n  onChangeCheckbox = (id) => {\n    const updateTodosArr = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    this.setState({\n      todos: updateTodosArr,\n    });\n  };\n  deleteToDoHandler = (id) => {\n    console.log(\"delete item\", id);\n    const updateTodos = this.state.todos.filter((item) => item.id !== id);\n\n    this.setState({\n      todos: updateTodos,\n    });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <InputToDo addToDo={this.addToDo} />\n        <ul>\n          {this.state.todos.map((todo) => (\n            <TodoItem\n              key={todo.id}\n              id={todo.id}\n              title={todo.title}\n              completed={todo.completed}\n              handleChange={this.onChangeCheckbox}\n              deleteToDoHandler={this.deleteToDoHandler}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// functional component\nconst TodoContainerFunction = (props) => {\n  return (\n    <div>\n      <h1>Hi, ich bin der TodoContainer!</h1>\n      <p>{props.text}</p>\n    </div>\n  );\n};\n\nexport default TodoContainer;\n","import React from \"react\";\nimport TodoContainer from \"./components/TodoContainer\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContainer text=\"Mein Text kommt als property\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}